// Generated by github.com/davyxu/protoplus
// DO NOT EDIT!
package tests

import (
	"github.com/davyxu/protoplus/proto"
	"github.com/davyxu/protoplus/wire"
	"unsafe"
)

var (
	_ *wire.Buffer
	_ = proto.Marshal
	_ unsafe.Pointer
)

type MyEnum int32

const (
	MyEnum_Zero MyEnum = 0
	MyEnum_One  MyEnum = 1
	MyEnum_Two  MyEnum = 2
)

var (
	MyEnumMapperValueByName = map[string]int32{
		"Zero": 0,
		"One":  1,
		"Two":  2,
	}

	MyEnumMapperNameByValue = map[int32]string{
		0: "Zero",
		1: "One",
		2: "Two",
	}
)

func (self MyEnum) String() string {
	return MyEnumMapperNameByValue[int32(self)]
}

type MyTypeMini struct {
	Bool    bool
	Int32   int32
	UInt32  uint32
	Int64   int64
	UInt64  uint64
	Float32 float32
	Float64 float64
	Str     string
}

func (self *MyTypeMini) String() string { return proto.CompactTextString(self) }

func (self *MyTypeMini) Size() (ret int) {

	ret += wire.SizeBool(1, self.Bool)

	ret += wire.SizeInt32(2, self.Int32)

	ret += wire.SizeUInt32(3, self.UInt32)

	ret += wire.SizeInt64(4, self.Int64)

	ret += wire.SizeUInt64(5, self.UInt64)

	ret += wire.SizeFloat32(6, self.Float32)

	ret += wire.SizeFloat64(7, self.Float64)

	ret += wire.SizeString(8, self.Str)

	return
}

func (self *MyTypeMini) Marshal(buffer *wire.Buffer) error {

	wire.MarshalBool(buffer, 1, self.Bool)

	wire.MarshalInt32(buffer, 2, self.Int32)

	wire.MarshalUInt32(buffer, 3, self.UInt32)

	wire.MarshalInt64(buffer, 4, self.Int64)

	wire.MarshalUInt64(buffer, 5, self.UInt64)

	wire.MarshalFloat32(buffer, 6, self.Float32)

	wire.MarshalFloat64(buffer, 7, self.Float64)

	wire.MarshalString(buffer, 8, self.Str)

	return nil
}

func (self *MyTypeMini) Unmarshal(buffer *wire.Buffer, fieldIndex uint64, wt wire.WireType) error {
	switch fieldIndex {
	case 1:
		v, err := wire.UnmarshalBool(buffer, wt)
		self.Bool = v
		return err
	case 2:
		v, err := wire.UnmarshalInt32(buffer, wt)
		self.Int32 = v
		return err
	case 3:
		v, err := wire.UnmarshalUInt32(buffer, wt)
		self.UInt32 = v
		return err
	case 4:
		v, err := wire.UnmarshalInt64(buffer, wt)
		self.Int64 = v
		return err
	case 5:
		v, err := wire.UnmarshalUInt64(buffer, wt)
		self.UInt64 = v
		return err
	case 6:
		v, err := wire.UnmarshalFloat32(buffer, wt)
		self.Float32 = v
		return err
	case 7:
		v, err := wire.UnmarshalFloat64(buffer, wt)
		self.Float64 = v
		return err
	case 8:
		v, err := wire.UnmarshalString(buffer, wt)
		self.Str = v
		return err

	}

	return wire.ErrUnknownField
}

type MySubType struct {
	Bool         bool
	Int32        int32
	UInt32       uint32
	Int64        int64
	UInt64       uint64
	Float32      float32
	Float64      float64
	Str          string
	BytesSlice   []byte
	BoolSlice    []bool
	Int32Slice   []int32
	UInt32Slice  []uint32
	Int64Slice   []int64
	UInt64Slice  []uint64
	Float32Slice []float32
	Float64Slice []float64
	StrSlice     []string
	Enum         MyEnum
	EnumSlice    []MyEnum
}

func (self *MySubType) String() string { return proto.CompactTextString(self) }

func (self *MySubType) Size() (ret int) {

	ret += wire.SizeBool(1, self.Bool)

	ret += wire.SizeInt32(2, self.Int32)

	ret += wire.SizeUInt32(3, self.UInt32)

	ret += wire.SizeInt64(4, self.Int64)

	ret += wire.SizeUInt64(5, self.UInt64)

	ret += wire.SizeFloat32(6, self.Float32)

	ret += wire.SizeFloat64(7, self.Float64)

	ret += wire.SizeString(8, self.Str)

	ret += wire.SizeBytes(9, self.BytesSlice)

	ret += wire.SizeBoolSlice(10, self.BoolSlice)

	ret += wire.SizeInt32Slice(11, self.Int32Slice)

	ret += wire.SizeUInt32Slice(12, self.UInt32Slice)

	ret += wire.SizeInt64Slice(13, self.Int64Slice)

	ret += wire.SizeUInt64Slice(14, self.UInt64Slice)

	ret += wire.SizeFloat32Slice(15, self.Float32Slice)

	ret += wire.SizeFloat64Slice(16, self.Float64Slice)

	ret += wire.SizeStringSlice(17, self.StrSlice)

	ret += wire.SizeInt32(18, int32(self.Enum))

	ret += wire.SizeInt32Slice(19, *(*[]int32)(unsafe.Pointer(&self.EnumSlice)))

	return
}

func (self *MySubType) Marshal(buffer *wire.Buffer) error {

	wire.MarshalBool(buffer, 1, self.Bool)

	wire.MarshalInt32(buffer, 2, self.Int32)

	wire.MarshalUInt32(buffer, 3, self.UInt32)

	wire.MarshalInt64(buffer, 4, self.Int64)

	wire.MarshalUInt64(buffer, 5, self.UInt64)

	wire.MarshalFloat32(buffer, 6, self.Float32)

	wire.MarshalFloat64(buffer, 7, self.Float64)

	wire.MarshalString(buffer, 8, self.Str)

	wire.MarshalBytes(buffer, 9, self.BytesSlice)

	wire.MarshalBoolSlice(buffer, 10, self.BoolSlice)

	wire.MarshalInt32Slice(buffer, 11, self.Int32Slice)

	wire.MarshalUInt32Slice(buffer, 12, self.UInt32Slice)

	wire.MarshalInt64Slice(buffer, 13, self.Int64Slice)

	wire.MarshalUInt64Slice(buffer, 14, self.UInt64Slice)

	wire.MarshalFloat32Slice(buffer, 15, self.Float32Slice)

	wire.MarshalFloat64Slice(buffer, 16, self.Float64Slice)

	wire.MarshalStringSlice(buffer, 17, self.StrSlice)

	wire.MarshalInt32(buffer, 18, int32(self.Enum))

	wire.MarshalInt32Slice(buffer, 19, *(*[]int32)(unsafe.Pointer(&self.EnumSlice)))

	return nil
}

func (self *MySubType) Unmarshal(buffer *wire.Buffer, fieldIndex uint64, wt wire.WireType) error {
	switch fieldIndex {
	case 1:
		v, err := wire.UnmarshalBool(buffer, wt)
		self.Bool = v
		return err
	case 2:
		v, err := wire.UnmarshalInt32(buffer, wt)
		self.Int32 = v
		return err
	case 3:
		v, err := wire.UnmarshalUInt32(buffer, wt)
		self.UInt32 = v
		return err
	case 4:
		v, err := wire.UnmarshalInt64(buffer, wt)
		self.Int64 = v
		return err
	case 5:
		v, err := wire.UnmarshalUInt64(buffer, wt)
		self.UInt64 = v
		return err
	case 6:
		v, err := wire.UnmarshalFloat32(buffer, wt)
		self.Float32 = v
		return err
	case 7:
		v, err := wire.UnmarshalFloat64(buffer, wt)
		self.Float64 = v
		return err
	case 8:
		v, err := wire.UnmarshalString(buffer, wt)
		self.Str = v
		return err
	case 9:
		v, err := wire.UnmarshalBytes(buffer, wt)
		self.BytesSlice = v
		return err
	case 10:
		v, err := wire.UnmarshalBoolSlice(buffer, wt)
		self.BoolSlice = append(self.BoolSlice, v...)
		return err
	case 11:
		v, err := wire.UnmarshalInt32Slice(buffer, wt)
		self.Int32Slice = append(self.Int32Slice, v...)
		return err
	case 12:
		v, err := wire.UnmarshalUInt32Slice(buffer, wt)
		self.UInt32Slice = append(self.UInt32Slice, v...)
		return err
	case 13:
		v, err := wire.UnmarshalInt64Slice(buffer, wt)
		self.Int64Slice = append(self.Int64Slice, v...)
		return err
	case 14:
		v, err := wire.UnmarshalUInt64Slice(buffer, wt)
		self.UInt64Slice = append(self.UInt64Slice, v...)
		return err
	case 15:
		v, err := wire.UnmarshalFloat32Slice(buffer, wt)
		self.Float32Slice = append(self.Float32Slice, v...)
		return err
	case 16:
		v, err := wire.UnmarshalFloat64Slice(buffer, wt)
		self.Float64Slice = append(self.Float64Slice, v...)
		return err
	case 17:
		v, err := wire.UnmarshalStringSlice(buffer, wt)
		self.StrSlice = append(self.StrSlice, v...)
		return err
	case 18:
		v, err := wire.UnmarshalInt32(buffer, wt)
		self.Enum = MyEnum(v)
		return err
	case 19:
		v, err := wire.UnmarshalInt32Slice(buffer, wt)
		for _, vv := range v {
			self.EnumSlice = append(self.EnumSlice, MyEnum(vv))
		}
		return err

	}

	return wire.ErrUnknownField
}

type MyType struct {
	Bool         bool
	Int32        int32
	UInt32       uint32
	Int64        int64
	UInt64       uint64
	Float32      float32
	Float64      float64
	Str          string
	Struct       MySubType
	BytesSlice   []byte
	BoolSlice    []bool
	Int32Slice   []int32
	UInt32Slice  []uint32
	Int64Slice   []int64
	UInt64Slice  []uint64
	Float32Slice []float32
	Float64Slice []float64
	StrSlice     []string
	StructSlice  []MySubType
	Enum         MyEnum
	EnumSlice    []MyEnum
}

func (self *MyType) String() string { return proto.CompactTextString(self) }

func (self *MyType) Size() (ret int) {

	ret += wire.SizeBool(1, self.Bool)

	ret += wire.SizeInt32(2, self.Int32)

	ret += wire.SizeUInt32(3, self.UInt32)

	ret += wire.SizeInt64(4, self.Int64)

	ret += wire.SizeUInt64(5, self.UInt64)

	ret += wire.SizeFloat32(6, self.Float32)

	ret += wire.SizeFloat64(7, self.Float64)

	ret += wire.SizeString(8, self.Str)

	ret += wire.SizeStruct(9, &self.Struct)

	ret += wire.SizeBytes(10, self.BytesSlice)

	ret += wire.SizeBoolSlice(11, self.BoolSlice)

	ret += wire.SizeInt32Slice(12, self.Int32Slice)

	ret += wire.SizeUInt32Slice(13, self.UInt32Slice)

	ret += wire.SizeInt64Slice(14, self.Int64Slice)

	ret += wire.SizeUInt64Slice(15, self.UInt64Slice)

	ret += wire.SizeFloat32Slice(16, self.Float32Slice)

	ret += wire.SizeFloat64Slice(17, self.Float64Slice)

	ret += wire.SizeStringSlice(18, self.StrSlice)

	if len(self.StructSlice) > 0 {
		for _, elm := range self.StructSlice {
			ret += wire.SizeStruct(19, &elm)
		}
	}

	ret += wire.SizeInt32(20, int32(self.Enum))

	ret += wire.SizeInt32Slice(21, *(*[]int32)(unsafe.Pointer(&self.EnumSlice)))

	return
}

func (self *MyType) Marshal(buffer *wire.Buffer) error {

	wire.MarshalBool(buffer, 1, self.Bool)

	wire.MarshalInt32(buffer, 2, self.Int32)

	wire.MarshalUInt32(buffer, 3, self.UInt32)

	wire.MarshalInt64(buffer, 4, self.Int64)

	wire.MarshalUInt64(buffer, 5, self.UInt64)

	wire.MarshalFloat32(buffer, 6, self.Float32)

	wire.MarshalFloat64(buffer, 7, self.Float64)

	wire.MarshalString(buffer, 8, self.Str)

	wire.MarshalStruct(buffer, 9, &self.Struct)

	wire.MarshalBytes(buffer, 10, self.BytesSlice)

	wire.MarshalBoolSlice(buffer, 11, self.BoolSlice)

	wire.MarshalInt32Slice(buffer, 12, self.Int32Slice)

	wire.MarshalUInt32Slice(buffer, 13, self.UInt32Slice)

	wire.MarshalInt64Slice(buffer, 14, self.Int64Slice)

	wire.MarshalUInt64Slice(buffer, 15, self.UInt64Slice)

	wire.MarshalFloat32Slice(buffer, 16, self.Float32Slice)

	wire.MarshalFloat64Slice(buffer, 17, self.Float64Slice)

	wire.MarshalStringSlice(buffer, 18, self.StrSlice)

	for _, elm := range self.StructSlice {
		wire.MarshalStruct(buffer, 19, &elm)
	}

	wire.MarshalInt32(buffer, 20, int32(self.Enum))

	wire.MarshalInt32Slice(buffer, 21, *(*[]int32)(unsafe.Pointer(&self.EnumSlice)))

	return nil
}

func (self *MyType) Unmarshal(buffer *wire.Buffer, fieldIndex uint64, wt wire.WireType) error {
	switch fieldIndex {
	case 1:
		v, err := wire.UnmarshalBool(buffer, wt)
		self.Bool = v
		return err
	case 2:
		v, err := wire.UnmarshalInt32(buffer, wt)
		self.Int32 = v
		return err
	case 3:
		v, err := wire.UnmarshalUInt32(buffer, wt)
		self.UInt32 = v
		return err
	case 4:
		v, err := wire.UnmarshalInt64(buffer, wt)
		self.Int64 = v
		return err
	case 5:
		v, err := wire.UnmarshalUInt64(buffer, wt)
		self.UInt64 = v
		return err
	case 6:
		v, err := wire.UnmarshalFloat32(buffer, wt)
		self.Float32 = v
		return err
	case 7:
		v, err := wire.UnmarshalFloat64(buffer, wt)
		self.Float64 = v
		return err
	case 8:
		v, err := wire.UnmarshalString(buffer, wt)
		self.Str = v
		return err
	case 9:
		return wire.UnmarshalStruct(buffer, wt, &self.Struct)
	case 10:
		v, err := wire.UnmarshalBytes(buffer, wt)
		self.BytesSlice = v
		return err
	case 11:
		v, err := wire.UnmarshalBoolSlice(buffer, wt)
		self.BoolSlice = append(self.BoolSlice, v...)
		return err
	case 12:
		v, err := wire.UnmarshalInt32Slice(buffer, wt)
		self.Int32Slice = append(self.Int32Slice, v...)
		return err
	case 13:
		v, err := wire.UnmarshalUInt32Slice(buffer, wt)
		self.UInt32Slice = append(self.UInt32Slice, v...)
		return err
	case 14:
		v, err := wire.UnmarshalInt64Slice(buffer, wt)
		self.Int64Slice = append(self.Int64Slice, v...)
		return err
	case 15:
		v, err := wire.UnmarshalUInt64Slice(buffer, wt)
		self.UInt64Slice = append(self.UInt64Slice, v...)
		return err
	case 16:
		v, err := wire.UnmarshalFloat32Slice(buffer, wt)
		self.Float32Slice = append(self.Float32Slice, v...)
		return err
	case 17:
		v, err := wire.UnmarshalFloat64Slice(buffer, wt)
		self.Float64Slice = append(self.Float64Slice, v...)
		return err
	case 18:
		v, err := wire.UnmarshalStringSlice(buffer, wt)
		self.StrSlice = append(self.StrSlice, v...)
		return err
	case 19:
		var elm MySubType
		if err := wire.UnmarshalStruct(buffer, wt, &elm); err != nil {
			return err
		} else {
			self.StructSlice = append(self.StructSlice, elm)
			return nil
		}
	case 20:
		v, err := wire.UnmarshalInt32(buffer, wt)
		self.Enum = MyEnum(v)
		return err
	case 21:
		v, err := wire.UnmarshalInt32Slice(buffer, wt)
		for _, vv := range v {
			self.EnumSlice = append(self.EnumSlice, MyEnum(vv))
		}
		return err

	}

	return wire.ErrUnknownField
}

type LoginREQ struct {
}

func (self *LoginREQ) String() string { return proto.CompactTextString(self) }

func (self *LoginREQ) Size() (ret int) {

	return
}

func (self *LoginREQ) Marshal(buffer *wire.Buffer) error {

	return nil
}

func (self *LoginREQ) Unmarshal(buffer *wire.Buffer, fieldIndex uint64, wt wire.WireType) error {
	switch fieldIndex {

	}

	return wire.ErrUnknownField
}

type LoginACK struct {
}

func (self *LoginACK) String() string { return proto.CompactTextString(self) }

func (self *LoginACK) Size() (ret int) {

	return
}

func (self *LoginACK) Marshal(buffer *wire.Buffer) error {

	return nil
}

func (self *LoginACK) Unmarshal(buffer *wire.Buffer, fieldIndex uint64, wt wire.WireType) error {
	switch fieldIndex {

	}

	return wire.ErrUnknownField
}
