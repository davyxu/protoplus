package pbscheme

import (
	"fmt"
	"github.com/davyxu/protoplus/codegen"
	"github.com/davyxu/protoplus/gen"
	"github.com/davyxu/protoplus/model"
	"io/ioutil"
	"path/filepath"
	"sort"
	"strings"
)

const protoDirCodeTemplate = `// Generated by github.com/davyxu/protoplus
// DO NOT EDIT!
syntax = "proto3";

option go_package= "./;{{.PackageName}}";

package {{.PackageName}};

{{range $a, $enumobj := .DependentSource}}
import "{{.}}"; {{end}}

{{range $a, $enumobj := .Enums}}
enum {{.Name}} {	{{range .Fields}}
	{{.Name}} = {{PbTagNumber $enumobj .}}; {{end}}
}{{end}}

{{range $a, $obj := .Structs}}
{{ObjectLeadingComment .}}
message {{.Name}} {	{{range .Fields}}
	{{PbTypeName .}} {{GoFieldName .}} = {{PbTagNumber $obj .}};{{FieldTrailingComment .}} {{end}}
}
{{end}}
`

func GenProtoDir(ctx *gen.Context) error {

	rootDS := &model.PBDescriptorSet{DescriptorSet: *ctx.DescriptorSet}

	var sb strings.Builder

	var srcNameList []string
	for srcName, ds := range rootDS.DescriptorSetBySource() {

		srcNameList = append(srcNameList, srcName)

		generator := codegen.NewCodeGen("dirproto").
			RegisterTemplateFunc(codegen.UsefulFunc).
			RegisterTemplateFunc(UsefulFunc).
			ParseTemplate(protoDirCodeTemplate, ds)

		if generator.Error() != nil {
			fmt.Println(string(generator.Data()))
			return generator.Error()
		}

		fullPathName := filepath.Join(ctx.OutputFileName, srcName)

		err := generator.WriteOutputFile(fullPathName).Error()
		if err != nil {
			return err
		}
	}

	sort.Strings(srcNameList)

	for _, d := range srcNameList {
		fmt.Fprintf(&sb, "%s ", d)
	}

	err := ioutil.WriteFile(filepath.Join(ctx.OutputFileName, "filelist.txt"), []byte(sb.String()), 0666)

	return err
}
